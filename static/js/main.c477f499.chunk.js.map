{"version":3,"sources":["components/Button.js","components/Slider.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","this","props","handleClick","currentState","React","Component","Slider","id","bpm","type","min","max","value","onChange","handleChange","App","render","className","state","handleBPM","startStop","playing","count","click1","Audio","click2","bind","updateInterval","playClick","bmpSpeed","timer","setInterval","event","target","clearInterval","setState","play","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"gQAEMA,E,4JACF,WACI,OACI,wBAAQC,QAASC,KAAKC,MAAMC,YAA5B,SACGF,KAAKC,MAAME,aAAe,iCAAU,iC,GAJ9BC,IAAMC,WAUZP,ICVTQ,E,4JACF,WACI,OACI,sBAAKC,GAAG,aAAR,UACM,gCAAMP,KAAKC,MAAMO,IAAjB,UACA,uBAAOC,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMC,MAAOZ,KAAKC,MAAMO,IAAKK,SAAUb,KAAKC,MAAMa,sB,GALhFV,IAAMC,WAWZC,ICoEAS,E,kDAzEb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IA0DRe,OAAS,WACP,OACE,qBAAKC,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,gCACA,4EACA,cAAC,EAAD,CAAQT,IAAK,EAAKU,MAAMV,IAAKM,aAAc,EAAKK,YAChD,cAAC,EAAD,CAAQjB,YAAa,EAAKkB,UAAWjB,aAAc,EAAKe,MAAMG,kBAhExE,EAAKH,MAAQ,CACbV,IAAK,IACLa,SAAS,EACTC,MAAO,GAEP,EAAKC,OAAS,IAAIC,MAAM,8DACxB,EAAKC,OAAS,IAAID,MAAM,8DACxB,EAAKL,UAAY,EAAKA,UAAUO,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKN,UAAY,EAAKA,UAAUM,KAAf,gBACjB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAZA,E,kDAenB,WACE,IAAMG,EAAW,IAAY7B,KAAKkB,MAAMV,IACxCR,KAAK8B,MAAQC,YAAY/B,KAAK4B,UAAWC,K,uBAG3C,SAAUG,GACR,IAAMxB,EAAMwB,EAAMC,OAAOrB,MACrBZ,KAAKkB,MAAMG,SACXa,cAAclC,KAAK8B,OACnB9B,KAAK2B,iBACL3B,KAAKmC,SAAS,CACVb,MAAO,EACPd,SAGJR,KAAKmC,SAAS,CACV3B,U,uBAKV,WAC2B,IAArBR,KAAKkB,MAAMI,MAAatB,KAAKyB,OAAOW,OACnCpC,KAAKuB,OAAOa,OACjBpC,KAAKmC,SAAS,CACVb,MAAOtB,KAAKkB,MAAMI,MAAQ,M,uBAIhC,WACMtB,KAAKkB,MAAMG,SACXa,cAAclC,KAAK8B,OACnB9B,KAAKmC,SAAS,CACVd,SAAS,MAGbrB,KAAK2B,iBACL3B,KAAKmC,SAAS,CACVb,MAAO,EACPD,SAAS,GACVrB,KAAK4B,gB,GAzDEvB,aCMHgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS9B,OACP,cAAC,IAAM+B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c477f499.chunk.js","sourcesContent":["import React from 'react'\n\nclass Button extends React.Component {\n    render() {\n        return (\n            <button onClick={this.props.handleClick}>\n              {this.props.currentState ? \"پایان\" : \"شروع\"}\n            </button>\n        );\n    }\n  }\n\nexport default Button\n","import React from 'react'\n\nclass Slider extends React.Component {\n    render() {\n        return (\n            <div id=\"bpm-slider\">\n                  <div>{this.props.bpm} BPM</div>\n                  <input type=\"range\" min=\"60\" max=\"240\" value={this.props.bpm} onChange={this.props.handleChange}/>\n            </div>\n        );\n    }\n  }\n\nexport default Slider\n","import {Component} from 'react';\nimport React from 'react';\nimport reactDom from 'react-dom';\nimport './App.css';\nimport Button from './components/Button';\nimport Slider from './components/Slider';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    bpm: 100,\n    playing: false,\n    count: 0,\n    }\n    this.click1 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n    this.click2 = new Audio(\"https://daveceddia.com/freebies/react-metronome/click1.wav\");\n    this.handleBPM = this.handleBPM.bind(this);\n    this.updateInterval = this.updateInterval.bind(this);\n    this.startStop = this.startStop.bind(this);\n    this.playClick = this.playClick.bind(this);\n  }\n\n  updateInterval() {\n    const bmpSpeed = 60 * 1000 / this.state.bpm;\n    this.timer = setInterval(this.playClick, bmpSpeed);\n  }\n\n  handleBPM(event) {\n    const bpm = event.target.value;\n    if (this.state.playing) {\n        clearInterval(this.timer);\n        this.updateInterval();\n        this.setState({\n            count: 0,\n            bpm\n        });\n    } else {\n        this.setState({\n            bpm\n        });\n    };\n  }\n\n  playClick() {\n    if (this.state.count === 0) this.click2.play();\n    else this.click1.play();\n    this.setState({\n        count: this.state.count + 1\n    });\n  }\n\n  startStop() {\n    if (this.state.playing) {\n        clearInterval(this.timer);\n        this.setState({\n            playing: false\n        });\n    } else {\n        this.updateInterval();\n        this.setState({\n            count: 0,\n            playing: true\n        }, this.playClick)\n    }\n  }\n\n  render = () =>{\n    return (\n      <div className=\"App\">\n          <header className=\"App-header\">\n              <div>\n              <h1>مترونوم</h1>\n              <Slider bpm={this.state.bpm} handleChange={this.handleBPM}/>\n              <Button handleClick={this.startStop} currentState={this.state.playing}/>\n              </div>\n          </header>\n      </div>\n    );\n  } \n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}